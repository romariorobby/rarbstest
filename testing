#!/bin/sh
# TODO: Add long argumnet with --arguments
# TODO: create func for dialog 
while getopts ":a:r:b:p:s:g:h" o; do case "${o}" in
	h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -s: Homebrew Source (tap)\\n  -a: AUR helper (must have pacman-like syntax) (paru by default)\\n  -h: Show this message\\n" && exit 1 ;;
	r) dotfilesrepo=${OPTARG} && chezmoi git ls-remote "$dotfilesrepo" || exit 1 ;;
	b) repobranch=${OPTARG} ;;
	p) progsfile=${OPTARG} ;;
	s) brewtapfile=${OPTARG} ;;
	a) aurhelper=${OPTARG} ;;
	g) gpgfile=${OPTARG} ;;
	*) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

username="romariorobby"
reponame="rarbstest"
branch="master"
pauseins="sleep 1s"
[ -z "$progsfile" ] && progsfile="https://raw.githubusercontent.com/$username/$reponame/$branch/progs.csv"
[ -z "$brewtapfile" ] && brewtapfile="https://raw.githubusercontent.com/$username/$reponame/$branch/brewtap.csv"
[ -z "$gpgfile" ] && gpgfile="https://raw.githubusercontent.com/$username/dotfiles/main/dot_local/share/vault/encrypted_aqs.tar.gz.asc"
[ -z "$aurhelper" ] && aurhelper="paru"

getOS() { \
    case $kernel_name in
        Darwin) 
                OS=$darwin_name
                ;;
        Linux|GNU*) OS=Linux ;;
        *) error "Unknown OS: '$kernel_name'" ;;
    esac
}

getDistro(){
    case $OS in
        Linux)
            if [[ -f /etc/os-release ]]; then
                    source /etc/os-release
            fi
            distro="${NAME}"
            ;;
    esac
}

getChassis(){ \
    [ -x "$(command -v "dmidecode")" ] || installdmi
    #https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop
    # Notebook - Desktop
    is_chassis=$(dmidecode -t chassis | grep "Type:" | cut -d: -f2 | tr -d ' ')
    # TODO: Add desktopp
    case "$is_chassis" in
        "Notebook") chassis="Laptop" ;;
        *) error "Unknown Chassis Type $is_chassis"
    esac
}

welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Lazy Bootstrap\\n\\nThis script will automatically install a fully-featured $OS desktop.\\n\\n-Romario" 10 60
    [[ "$distro" == "Arch Linux" ]] && \
        dialog --colors --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "If you running GNU/LINUX(Arch), Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
}

finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	if [ "$OS" == "macOS" ]; then
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\n Some configurations needed to restart .\\n\\n.t Romario" 12 80
	else
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	fi
}

modepick(){ \
	if [[ "$distro" == "Arch Linux" ||  -f "/etc/artix-release" ]]; then
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Mode: " 10 80 3 \
                I "Installer (Archlinux only)" off \
                R "(Re)install (Packages)" on \
                P "Post Install" on \
                D "Debug" off 3>&1 1>&2 2>&3 3>&1)
    else
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Mode: " 10 80 3 \
                R "(Re)install (Packages)" on \
                P "Post Install" on \
                D "Debug" off 3>&1 1>&2 2>&3 3>&1)
    fi
	case $mpick in
		"I") namempick="Installer" ;;
        "R") namempick="(Re)install (Packages)" ;;
		"D") namempick="Debug" ;;
		"P") namempick="Post Install" ;;
	esac

    case $mpick in
        "I") 
            dialog --defaultno --title "PRE-CHROOT" --yesno "Go to Pre-chroot?"  6 30 && curl $prechrootfile > prechroot.sh && bash prechroot.sh || modepick
            exit
            ;;
        "D")  
            dialog --defaultno --title "DEBUGGING" --yesno "Go to Debug Mode?"  6 30 && source $DIRS/debug || modepick
            exit
            ;;
    esac ;}

typepick() { \
	tpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Type: " 10 60 3 \
		B "Base Only" on \
		M "Minimal" on \
		F "Full" off 3>&1 1>&2 2>&3 3>&1)
	case $tpick in
		"B") nametpick="Base" ;;
		"M") nametpick="Minimal" ;;
		"F") nametpick="Full" ;;
	esac
}

#
# MAIN INSTALL
#

installpkg() {
    case "$OS" in
        "macOS") brew install "$1" >/dev/null 2>&1 ;;
        "Linux")
            case "$distro" in
                "Arch Linux") pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ;;
            esac
            ;;
    esac ;}

tapbrew(){ \
	brew tap "$1" >/dev/null 2>&1
}

##
maintap() {
    echo "$tapinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Homebrew Repositories" --infobox "\Zb\`$1\`\Zn \Z1repositories already added\Zn to Homebrew ($s of $totaltap). \Z1Skipping...\Zn" 5 70 && $pauseins && return
	dialog --colors --title "RARBS Homebrew Repositories" --infobox "Adding \Zb\`$1\`\Zn to Homebrew ($s of $totaltap). $1 $2" 5 70
	tapbrew "$1"
}

maininstall() {
	echo "$pacinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the package manager ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	installpkg "$1" ;}

aurinstall() {
	echo "$aurinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the AUR ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing \Zb\`$1\`\Zn ($n of $total) from the AUR. $1 $2" 5 70
	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1 ;}

pipinstall() { \
    case "$OS" in
        "macOS") [ -x "$(command -v "pip")" ] || curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py >/dev/null 2>&1 ;;
            *) [ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1 ;;
    esac
	echo "$pipinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the PIP ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing the Python package \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	yes | pip install "$1" ;}

npminstall() { \
	echo "$npminstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\`$1\` \Z1already installed\Zn from the NPM ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --title "RARBS Installation" --infobox "Installing the NPM package \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	[ -x "$(command -v "npm")" ] || installpkg npm >/dev/null 2>&1 || installpkg node >/dev/null 2>&1
	npm install -g "$1" ;}

manualinstall(){
	[ -f "/usr/bin/$1" ] && dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the AUR/Manually. \Z1Skipping...\Zn" 5 70 && $pauseins && return 1 || (
	dialog --infobox "Installing \Zb\"$1\"\Zn, an AUR helper..." 4 50
	cd /tmp || exit 1
	rm -rf /tmp/"$1"*
	sudo -u "$name" git clone https://aur.archlinux.org/$1.git &&
	cd $1 && sudo -u "$name" makepkg -si --noconfirm >/dev/null 2>&1
	cd /tmp || return 1) ;}

gitmakeinstall() {
	progname="$(basename "$1" .git)"
	dir="$repodir/$progname"
	dialog --title "RARBS Installation" --infobox "Installing \Zb\`$progname\`\Zn ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1 ;}

chezinstall() {
	dialog --infobox "Installing config files..." 4 60
	[ -x "$(command -v "chezmoi")" ] || installpkg chezmoi >/dev/null 2>&1
	chezdotinstall "$1" ;}

installdmi(){
    if [[ "$OS" == "macOS" ]]; then
        dmiurl="https://github.com/acidanthera/dmidecode/releases/download/3.3b/dmidecode-mac-3.3b.zip"
        curl -Ls $dmiurl -o /tmp/dmidecode.zip
        unzip /tmp/dmidecode.zip -d /usr/local/bin
    else
        installpkg dmidecode
    fi
}

filterprogs(){ \
    # TODO: Make Read from org format del/IFS="|"
	# ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -lLs "$progsfile" | sed '/^-\|*\|#/d;/^|-/d' > /tmp/progs.csv
	dialog --infobox "Filtering and sorting progs.csv..." 4 60
    case "$OS" in
        "macOS") 
            case "$tpick" in
                "B") ([ -f "$progsfile" ] && grep "^[HPN]," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN]," > /tmp/progs.csv ;;
                "M") ([ -f "$progsfile" ] && grep "^[HPN],\|HM,\|PM,\|NM," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN],\|HM,\|PM,\|NM," > /tmp/progs.csv ;;
                "F") ([ -f "$progsfile" ] && sed '/^[#AM]/d' $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | sed '/^[#AM]/d' > /tmp/progs.csv ;;
            esac
            ;;
        "Linux") 
            case "$distro" in
                "Arch Linux")
                    case "$tpick" in
                        "B") ([ -f "$progsfile" ] && grep "^[AMGPN]," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AMGPN]," > /tmp/progs.csv ;;
                        "M") ([ -f "$progsfile" ] && grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," > /tmp/progs.csv ;;
                        "F") ([ -f "$progsfile" ] && sed '/^[#H]/d' "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^[#H]/d' > /tmp/progs.csv ;;
                    esac
                    ;;
            esac
            ;;
    esac
}

filtertap(){ \
    dialog --infobox "Filtering and sorting brewtap.csv..." 4 60 && sleep 1s
	case $tpick in
		"B") ([ -f "$brewtapfile" ] && grep "^M," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^M," > /tmp/brewtap.csv ;;
		"M") ([ -f "$brewtapfile" ] && grep "^MM," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^MM," > /tmp/brewtap.csv ;;
		"F") ([ -f "$brewtapfile" ] && sed '/^#/d' $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | sed '/^#/d' > /tmp/brewtap.csv ;;
	esac ;}

installationtaploop(){ \
	filtertap
	totaltap=$(wc -l < /tmp/brewtap.csv)
	while IFS=, read -r tag source comment; do
		s=$((s+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case "$tag" in
			*) maintap "$source" "$comment" ;;
		esac
	done < /tmp/brewtap.csv ;}

listpkg(){
    case "$OS" in
        "Linux") 
                case "$distro" in
                    "Arch Linux") 
                            aurinstalled=$(pacman -Qqm)
                            pacinstalled=$(pacman -Qq)
                            ;;
                esac
                ;;
        "macOS")
                tapinstalled=$(brew tap)
                pacinstalled=$(brew list | uniq)
                ;;
    esac
	npminstalled=$(npm ls -g | awk '{print $2}' | sed 's/\@.*//; /^$/d')
	pipinstalled=$(pip list | awk '{print $1}')
}

installationloop() { \
	filterprogs
    listpkg
	[ "$OS" == "macOS" ] && installationtaploop
	total=$(wc -l < /tmp/progs.csv)
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
        case "$tpick" in
            B)
                case "$tag" in
                    [HM]) maininstall "$program" "$comment" ;;
                    "A") aurinstall "$program" "$comment" ;;
                    "G") gitmakeinstall "$program" "$comment" ;;
                    "N") npminstall "$program" "$comment" ;;
                    "P") pipinstall "$program" "$comment" ;;
                esac
                ;;
            M|F)
                case "$tag" in
                    [MH]*) maininstall "$program" "$comment" ;;
                    "A"*) aurinstall "$program" "$comment" ;;
                    "G"*) gitmakeinstall "$program" "$comment" ;;
                    "N"*) npminstall "$program" "$comment" ;;
                    "P"*) pipinstall "$program" "$comment" ;;
                esac
                ;;
        esac
	done < /tmp/progs.csv ;}

getUname(){
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"
    if [ "$kernel_name" == "Darwin" ];then
        export SYSTEM_VERSION_COMPAT=0
        IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
                                "/System/Library/CoreServices/SystemVersion.plist")"
            for ((i=0;i<${#sw_vers[@]};i+=2)) {
                case ${sw_vers[i]} in
                    ProductName)          darwin_name=${sw_vers[i+1]} ;;
                    ProductVersion)       osx_version=${sw_vers[i+1]} ;;
                    ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
                esac
            }
    fi
}
# FIXME: Wtf is this?
rinfo(){ 
    dialog --colors --title "RARBS Picking Info" --yesno \
"\\ZbOS     :\\Zn $OS - $DISTRO\n
\ZbChassis:\\Zn $chassis\n\
\ZbType   :\\Zn $nametpick\n\
\ZbMode   :\\Zn $namempick\n\
\ZbWM/DE  :\\Zn $namewmde\n" \
10 70 || userpicking ;}
userpicking(){
    modepick
    typepick
    rinfo
}
initsetup(){
    getUname
    getOS
    getDistro
    getChassis
}
main(){
    initsetup
    userpicking
    installationloop
    finalize
}
main "$@"
