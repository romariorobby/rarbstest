#!/bin/sh
# TODO: create func for dialog 
username="romariorobby"
reponame="rarbstest"
branch="master"
pauseins="sleep 0.1s"
DEBUG=0
DIRS="$(dirname "$0")"
[ -z "$dotfilesrepo" ] && dotfilesrepo="https://github.com/$username/dotfiles.git"
[ -z "$progsfile" ] && progsfile="https://raw.githubusercontent.com/$username/$reponame/$branch/progs.csv"
[ -z "$brewtapfile" ] && brewtapfile="https://raw.githubusercontent.com/$username/$reponame/$branch/brewtap.csv"
[ -z "$gpgfile" ] && gpgfile="https://raw.githubusercontent.com/$username/dotfiles/main/dot_local/share/vault/encrypted_aqs.tar.gz.asc"
# search in gtok
[ -z "$gpgprivrepo" ] && gpgprivrepo="https://raw.githubusercontent.com/$username/dotfiles/main/dot_local/share/vault/encrypted_gtok.asc"

[ -z "$aurhelper" ] && aurhelper="paru"

welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Lazy Bootstrap\\n\\nThis script will automatically install a fully-featured $OS desktop.\\n\\n-Romario" 10 60
    [[ "$distro" == "Arch Linux" ]] && \
        dialog --colors --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "If you running GNU/LINUX(Arch), Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
	}
error() { clear; printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;}

preinstallmsg() { \
	dialog --title "Let's get this party started!" --yes-label "Let's go!" --no-label "No, nevermind!" --yesno "The rest of the installation will now be totally automated, so you can sit back and relax.\\n\\nIt will take some time, but when done, you can relax even more with your complete system.\\n\\nNow just press <Let's go!> and the system will begin installation!" 13 60 || { clear; exit 1; }
	}

newperms() { # Set special sudoers settings for install (or after).
	sed -i "/#RARBS/d" /etc/sudoers
	echo "$* #RARBS" >> /etc/sudoers ;}

getOS() { \
    case $kernel_name in
        Darwin) 
                OS=$darwin_name
                ;;
        Linux|GNU*) OS=Linux ;;
        *) error "Unknown OS: '$kernel_name'" ;;
    esac
}
# TODO: Move to dialog
userpick(){ \
    [[ "$name" ]] && return

    case "$OS" in
        "macOS") listuser=$(dscl . list /Users | grep -v '_\|root\|daemon\|nobody') ;; #> $tempuser)
        # HACK: Temporary to get user name on Linux
        "Linux") listuser=$(grep "1000\|0:0:" /etc/passwd | cut -d: -f1) ;;
    esac
    listuser+=" Create?"
    # doing this somehow aware spaces :)
    for ((i = 0; i < ${#listuser[@]}; i++))
    do
        while [[ -z $name ]]; do
            printf "Select Username: \n"
            select user in $listuser; do
                case "$user" in
                    *)  name=$user
                        clear
                        [ "$name" == "Create?" ] && userOS
                        break 
                        ;;
                esac
            done
        done
    done
}
getDistro(){
    case $OS in
        Linux)
            if [[ -f /etc/os-release ]]; then
                    source /etc/os-release
            fi
            distro="${NAME}"
            ;;
        "macOS"|"Mac OS X")
            case $osx_version in
                10.15*) codename="macOS Catalina" ;;
                10.16*|11.*) codename="macOS Big Sur";;
                12.*) codename="macOS Monterey";;
                *) codename="macOS" ;;
            esac
            distro="$codename $osx_version $osx_build"
    esac
}

getChassis(){ \
    [ -x "$(command -v "dmidecode")" ] || installdmi
    #https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop
    # Notebook - Desktop
    is_chassis=$(dmidecode -t chassis | grep "Type:" | cut -d: -f2 | tr -d ' ')
    # TODO: Add desktopp
    case "$is_chassis" in
        "Notebook") chassis="Laptop" ;;
        "Unknown") chassis="Virtual Machine" ;;
        *) error "Unknown Chassis Type $is_chassis"
    esac
}

welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Lazy Bootstrap\\n\\nThis script will automatically install a fully-featured $OS desktop.\\n\\n-Romario" 10 60
    [[ "$distro" == "Arch Linux" ]] && \
        dialog --colors --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "If you running GNU/LINUX(Arch), Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
}

finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	if [ "$OS" == "macOS" ]; then
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\n Some configurations needed to restart .\\n\\n.t Romario" 12 80
	else
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	fi
}

### Picking
modepick(){ \
	if [[ "$distro" == "Arch Linux" ||  -f "/etc/artix-release" ]]; then
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Picking" --radiolist "Select RARBS Mode: " 10 80 3 \
                I "Installer (Archlinux)" off \
                R "(Re)install (Packages)" on \
                P "Post Install" on 3>&1 1>&2 2>&3 3>&1)
    else
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Picking" --radiolist "Select RARBS Mode: " 10 80 3 \
                R "(Re)install (Packages)" on \
                P "Post Install" on 3>&1 1>&2 2>&3 3>&1)
    fi
	case $mpick in
		"I") namempick="Installer" ;;
        "R") namempick="(Re)install (Packages)" ;;
		"P") namempick="Post Install" ;;
	esac

    case $mpick in
        "I") 
            dialog --defaultno --title "PRE-CHROOT" --yesno "Go to Pre-chroot?"  6 30 && curl $prechrootfile > prechroot && bash prechroot || modepick
            exit
            ;;
    esac ;}

wmdepick() { \
    cmd=(dialog --no-cancel \
                --backtitle "RARBS Type Picking" \
                --radiolist "Select Windows Manager OR Desktop Environment: " 15 60 3)
    case "$OS" in
        "macOS") 
            options=(AM "Amethyst" off
                     YM "Yabai" off
                     Z "Don't Install" on)
            wdpick=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            case $wdpick in
                "DM") namewdpick="Amethyst" ;;
                "YM") namewdpick="Yabai" ;;
                "Z") namewdpick="None" ;;
                *) namewdpick="None" ;;
            esac
            ;;
        "Linux")
            options=(AM "Awesome" off
                     DM "DWM" off
                     GE "GNOME(Not available yet)" off
                     XE "XFCE(Not available yet)" off
                     KE "KDE (Not available yet)" off
                     Z "Don't Install" on)
            wdpick=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
            case $wdpick in
                "AM") namewdpick="Awesome" ;;
                "DM") namewdpick="DWM" ;;
                "XE") namewdpick="XFCE" ;;
                "KE") namewdpick="KDE" ;;
                "Z") namewdpick="None" ;;
                *) namewdpick="None" ;;
            esac
            ;;
    esac
}

typepick() { \
	tpick=$(dialog --no-cancel --backtitle "RARBS Type Picking" --radiolist "Select RARBS Type: " 10 60 3 \
		B "Base Only" on \
		M "Minimal" on \
		F "Full" off 3>&1 1>&2 2>&3 3>&1)
	case $tpick in
		"B") nametpick="Base" ;;
		"M") nametpick="Minimal" ;;
		"F") nametpick="Full" ;;
	esac
}
passpick(){
    cmd=(dialog --radiolist "Select options:" 10 76 16)
    options=(P "Pass Unix" off    # any option can be set to default to "on"
             B "Bitwarden" off
             X "Don't Install" on)
    ppick=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	case $ppick in
		"B") nameppick="Bitwarden" ;;
		"P") nameppick="Pass Unix" ;;
		"X") nameppick="None" ;;
		*) nameppick="None" ;;
	esac
    # unset cmd options
}

#
# MAIN INSTALL
#
# installpassmgr(){
#     case $ppick in
#         B|P) 
#             adduserpm
#             ;;
#         "X") return 1 ;;
#     esac
# }
# TODO: P1: change $pmpass1 to password Box
getuserpm(){
    case $ppick in
        "B")
            pmname=$(dialog --colors --inputbox "First, please enter a email address for \\Zb$nameppick\\Zn." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
            while ! echo "$pmname" | grep -q '\S\+@\S\+\.[A-Za-z]\+'; do
                pmname=$(dialog --colors --no-cancel --inputbox "Email Address \\Z1not valid\\Zn. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
            done
            ;;
        "P")
            pmname=$(dialog --colors --inputbox "First, please enter a name for \\Zb$nameppick\\Zn." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
            while ! echo "$pmname" | grep -q "^[a-z_][a-z0-9_-]*$"; do
                pmname=$(dialog --colors --no-cancel --inputbox "Username \\Z1not valid\\Zn. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
            done
            ;;
        *) return ;;
    esac
	pmpass1=$(dialog --no-cancel --inputbox "Enter a password for that user $nameppick." 10 60 3>&1 1>&2 2>&3 3>&1)
	pmpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pmpass1" = "$pmpass2" ]; do
		unset pmpass2
		pmpass1=$(dialog --no-cancel --inputbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pmpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}
#
# Setup Password Manager
passmgr_bw(){
    [ -x "$(command -v "bw")" ] || aurinstall bitwarden-cli-bin >/dev/null 2>&1 || installpkg bitwarden-cli >/dev/null 2>&1
    case "$OS" in
        "Linux") 
            bwdir="/home/$name/.local/share/bitwarden"; mkdir -p "$bwdir"; chown -R "$name":wheel "$(dirname "$bwdir")"
            ;;
        "macOS") 
            bwdir="$HOME/.local/share/bitwarden"; mkdir -p "$bwdir"
            ;;
    esac
    # [[ -f "$bwdir/email" && -f "$bwdir/key" ]] && cp $bwdir/email $bwdir/email.bak && cp $bwdir/key $bwdir/email.bak
    dialog --infobox "Login on Bitwarden & Adding Environment Variables Locally..." 10 50
    bw logout 2>/dev/null
    export BW_SESSION=$(bw login $pmname $pmpass1 --raw)
    while [ -z "$BW_SESSION" ]; do
        dialog --colors --no-cancel --infobox "Username \\Zb($pmname)\\Zn or Password \\Zb($pmpass1)\\Zn \\Z1Error.\\Z1\\n\\nEnter Username and Password Again..." 10 50
        sleep 2s
        getuserpm
        passmgr_bw
    done
    passmgr=1
}
passmgr_passunix(){
    # Find a better way to do this
    curl -Ls "$gpgprivrepo" -o /tmp/gtok.asc
	dialog --infobox "Adding $nameppick user \"$pmname\"..." 4 50
    [ -x "$(command -v "pass")" ] || installpkg pass >/dev/null 2>&1 
    case "$OS" in
        "Linux") export PASSWORD_STORE_DIR="/home/$name/.local/share/password-store"
                 gpg --pinentry-mode loopback --passphrase "$gpgpass1" /tmp/gtok.asc
                ;;
        "macOS") export PASSWORD_STORE_DIR="$HOME/.local/share/password-store"
                 gpg --pinentry-mode loopback --passphrase "$gpgpass1" /tmp/gtok.asc
                ;;
    esac
    pmpass1=$(cat "/tmp/gtok")
	[ -d "$PASSWORD_STORE_DIR" ] && mv $PASSWORD_STORE_DIR $PASSWORD_STORE_DIR-bak && rm -rf $PASSWORD_STORE_DIR
    git clone https://$pmname:$pmpass1@github.com/$pmname/pass.git $PASSWORD_STORE_DIR
    # git clone git@github.com:romariorobby/pass.git $PASSWORD_STORE_DIR
	while ! [ "$?" = 0 ]; do
		dialog --colors --no-cancel --infobox "Username \\Zb($pmname)\\Zn or Password \\Zb($pmpass1)\\Zn \\Z1Error.\\Z1\\n\\nEnter Username and Password Again..." 10 50
		# rm -rf $PASSWORD_STORE_DIR
		sleep 2s
        getuserpm
        passmgr_passunix
	done
    #cleanup
    rm /tmp/gtok.asc /tmp/gtok
    passmgr=1
}

installpassmgr(){
    getuserpm
    dialog --infobox "Adding $nameppick user \"$pmname\" for $name..." 4 50
    case "$ppick" in
        B) passmgr_bw ;;
        P) passmgr_passunix ;;
    esac
}
installpreq(){
    echo "Installing Dialog...."
    [ -x "$(command -v "dialog")" ] || \
        installpkg dialog || error "Are you sure you're running this as the root user, are on an $OS and have an internet connection?"
	for x in curl git ntp zsh ; do
        [ -x "$(command -v "$x")" ] && return 
		dialog --colors --title "RARBS Prerequisite" --infobox "Installing \Zb\`$x\`\Zn which is required to install and configure other programs." 5 70
		installpkg "$x"
	done
    clear
}

installreq(){
    # Just in case
	[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers
    case $OS in
        macOS) reqMac ;;
        Linux) reqLinux ;;
    esac
}

reqLinux(){
	newperms "%wheel ALL=(ALL) NOPASSWD: ALL"
    case $distro in
        "Arch Linux")
                refreshkeys 
                manualinstall $aurhelper-bin || manualinstall $aurhelper || error "Failed to install $aurhelper (AUR helper)."
                ntpdate 0.id.pool.ntp.org >/dev/null 2>&1
                ;;
    esac
}
reqMac(){
    # FIXME: do macOS need this?
    # Allow user to run sudo without password.
	newperms "%wheel ALL=(ALL) NOPASSWD: ALL"
    installbrew
}
installpkg() {
    case "$OS" in
        "macOS") brew install "$1" >/dev/null 2>&1 ;;
        "Linux")
            case "$distro" in
                "Arch Linux") pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ;;
            esac
            ;;
    esac ;}

tapbrew(){ \
	brew tap "$1" >/dev/null 2>&1
}

##
maintap() {
    echo "$tapinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Homebrew Repositories" --infobox "\Zb\`$1\`\Zn \Z1repositories already added\Zn to Homebrew ($s of $totaltap). \Z1Skipping...\Zn" 5 70 && $pauseins && return
	dialog --colors --title "RARBS Homebrew Repositories" --infobox "Adding \Zb\`$1\`\Zn to Homebrew ($s of $totaltap). $1 $2" 5 70
	tapbrew "$1"
}

maininstall() {
	echo "$pacinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the package manager ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	installpkg "$1" ;}

aurinstall() {
	echo "$aurinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the AUR ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing \Zb\`$1\`\Zn ($n of $total) from the AUR. $1 $2" 5 70
	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1 ;}

pipinstall() { \
    case "$OS" in
        "macOS") [ -x "$(command -v "pip")" ] || curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py >/dev/null 2>&1 ;;
            *) [ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1 ;;
    esac
	echo "$pipinstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the PIP ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing the Python package \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	yes | pip install "$1" ;}

npminstall() { \
	[ -x "$(command -v "npm")" ] || installpkg npm >/dev/null 2>&1 || installpkg node >/dev/null 2>&1
	echo "$npminstalled" | grep -q "^$1$" && \
        dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the NPM ($n of $total). \Z1Skipping...\Zn" 5 70 && $pauseins && return 1
	dialog --colors --title "RARBS Installation" --infobox "Installing the NPM package \Zb\`$1\`\Zn ($n of $total). $1 $2" 5 70
	npm install -g "$1" ;}

manualinstall(){
	[ -f "/usr/bin/$1" ] && dialog --colors --title "RARBS Installation" --infobox "\Zb\`$1\`\Zn \Z1already installed\Zn from the AUR/Manually. \Z1Skipping...\Zn" 5 70 && $pauseins && return 1 || (
	dialog --colors --infobox "Installing \Zb\"$1\"\Zn, an AUR helper..." 4 50
	cd /tmp || exit 1
	rm -rf /tmp/"$1"*
	sudo -u "$name" git clone https://aur.archlinux.org/$1.git &&
	cd $1 && sudo -u "$name" makepkg -si --noconfirm >/dev/null 2>&1
	cd /tmp || return 1) ;}

gitmakeinstall() {
	progname="$(basename "$1" .git)"
	dir="$repodir/$progname"
	dialog --colors --title "RARBS Installation" --infobox "Installing \Zb\`$progname\`\Zn ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1 ;}
decryptgpg(){
    # gpgconf --kill gpg-agent
    dialog --infobox "Decrypting GPG ..." 4 60
    ([ -f "$gpgfile" ] && cp "$gpgfile" /tmp/aqs.tar.gz.asc) || \
        curl -Ls "$gpgfile" -o /tmp/aqs.tar.gz.asc
    case "$OS" in
        "macOS") 
            gpgdir="$HOME/.local/share/vault" # this is deprecated
            gpg --pinentry-mode loopback --passphrase "$gpgpass1" /tmp/aqs.tar.gz.asc
		    tar -xzf /tmp/aqs.tar.gz -C $HOME
            ;;
        "Linux") 
            # TODO: should we add more spesific?
            # TODO: Maybe we use these when in mpick == "I"?
            # Adding `sudo -u $name` prefix at gpg gives error!
            gpgdir="/home/$name/.local/share/vault" # this is deprecated
            gpg --pinentry-mode loopback --passphrase "$gpgpass1" /tmp/aqs.tar.gz.asc
            sudo -u "$name" tar -xzf /tmp/aqs.tar.gz -C /home/$name
            ;;
    esac
    #cleanup
    rm /tmp/aqs.tar.gz /tmp/aqs.tar.gz.asc
}
installgpg(){ 
    dialog --infobox "Downloading GPG ..." 4 60
    [ -x "$(command -v "gpg")" ] || installpkg gnupg
    decryptgpg
    while ! [ "$?" = 0 ]; do
        dialog --infobox "Error Decrypting GPG. retry..." 4 60
        dialog --infobox "Decrypting GPG ..." 4 60
        getgpg
        decryptgpg
    done
    dialog --infobox "Completed Extracted GPG ..." 4 60
}

chezinstall() {
	dialog --infobox "Installing config files..." 4 60 && sleep 5s
	[ -x "$(command -v "chezmoi")" ] || installpkg chezmoi >/dev/null 2>&1
	installationdot "$1" ;}

installdmi(){
    if [[ "$OS" == "macOS" ]]; then
        dmiurl="https://github.com/acidanthera/dmidecode/releases/download/3.3b/dmidecode-mac-3.3b.zip"
        curl -Ls $dmiurl -o /tmp/dmidecode.zip
        unzip /tmp/dmidecode.zip -d /usr/local/bin
    else
        installpkg dmidecode
    fi
}

installbrew(){ \
	[ -d "/Library/Developer/CommandLineTools" ] && \
        dialog --title "RARBS Prerequisite" --infobox "XCode already installed." 5 70 || \
        xcode-select --install
    [ -x "$(command -v "brew")" ] && dialog --title "RARBS Prerequisite" --infobox "Homebrew already installed." 5 70 || \
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    dialog --title "RARBS Prerequisite" --infobox "Updating Homebrew..." 5 70
    brew update
}
filterprogs(){ \
    # TODO: Make Read from org format del/IFS="|"
	# ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -lLs "$progsfile" | sed '/^-\|*\|#/d;/^|-/d' > /tmp/progs.csv
	dialog --infobox "Filtering and sorting progs.csv..." 4 60
    case "$OS" in
        "macOS") 
            case "$tpick" in
                "B") ([ -f "$progsfile" ] && grep "^[HPN]," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN]," > /tmp/progs.csv ;;
                "M") ([ -f "$progsfile" ] && grep "^[HPN],\|HM,\|PM,\|NM," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN],\|HM,\|PM,\|NM," > /tmp/progs.csv ;;
                "F") ([ -f "$progsfile" ] && sed '/^[#AM]/d' $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | sed '/^[#AM]/d' > /tmp/progs.csv ;;
            esac
            ;;
        "Linux") 
            case "$distro" in
                "Arch Linux")
                    case "$tpick" in
                        "B") ([ -f "$progsfile" ] && grep "^[AMGPN]," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AMGPN]," > /tmp/progs.csv ;;
                        "M") ([ -f "$progsfile" ] && grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," > /tmp/progs.csv ;;
                        "F") ([ -f "$progsfile" ] && sed '/^[#H]/d' "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^[#H]/d' > /tmp/progs.csv ;;
                    esac
                    ;;
            esac
            ;;
    esac
}

filtertap(){ \
    dialog --infobox "Filtering and sorting brewtap.csv..." 4 60 && $pauseins
	case $tpick in
		"B") ([ -f "$brewtapfile" ] && grep "^M," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^M," > /tmp/brewtap.csv ;;
		"M") ([ -f "$brewtapfile" ] && grep "^MM," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^MM," > /tmp/brewtap.csv ;;
		"F") ([ -f "$brewtapfile" ] && sed '/^#/d' $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | sed '/^#/d' > /tmp/brewtap.csv ;;
	esac ;}

listpkg(){
    case "$OS" in
        "Linux") 
                case "$distro" in
                    "Arch Linux") 
                            aurinstalled=$(pacman -Qqm)
                            pacinstalled=$(pacman -Qq)
                            ;;
                esac
                ;;
        "macOS")
                tapinstalled=$(brew tap)
                #TODO: This not detected /Applications/
                pacinstalled=$(brew list | uniq)
                ;;
    esac
    for x in npm pip nodejs; do
        [ -x "$(command -v "$x")" ] && return 
		dialog --colors --title "RARBS Prerequisite" --infobox "Installing \Zb\`$x\`\Zn which is required to downloading $x programs." 5 70
        installpkg "$x"
    done
	npminstalled=$(npm ls -g | awk '{print $2}' | sed 's/\@.*//; /^$/d')
	pipinstalled=$(pip list | awk '{print $1}')
}

# TODO: P1: Checking today!
installationdot(){
    case "$OS" in
        "macOS")
            case "$tpick" in
                # Base or minimal
                B|M)
                    case "$ppick" in
                        B) SECRET=1 BW=1 MINIMAL=1 chezmoi init "$1" ;;
                        P) SECRET=1 MINIMAL=1 chezmoi init "$1" ;;
                        X) MINIMAL=1 chezmoi init "$1" ;;
                    esac
                    ;;
                # Full
                F)
                    case "$ppick" in
                        B) SECRET=1 BW=1 chezmoi init "$1" ;;
                        P) SECRET=1 chezmoi init "$1" ;;
                        X) chezmoi init "$1" ;;
                    esac
                    ;;
            esac
            ;;
        "Linux")
            case "$tpick" in
                B|M) 
                    case "$ppick" in
                        B) sudo -u "$name" SECRET=1 BW=1 MINIMAL=1 chezmoi init "$1" ;;
                        P) sudo -u "$name" SECRET=1 MINIMAL=1 chezmoi init "$1" ;;
                        X) sudo -u "$name" MINIMAL=1 chezmoi init "$1" ;;
                    esac
                    ;;
                F) 
                    case "$ppick" in
                        B) sudo -u "$name" SECRET=1 BW=1 chezmoi init "$1" ;;
                        P) sudo -u "$name" SECRET=1 chezmoi init "$1" ;;
                        X) sudo -u "$name" chezmoi init "$1" ;;
                    esac
                    ;;
            esac
            ;;
    esac
}

installationtaploop(){ \
	filtertap
	totaltap=$(wc -l < /tmp/brewtap.csv)
	while IFS=, read -r tag source comment; do
		s=$((s+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case "$tag" in
			*) maintap "$source" "$comment" ;;
		esac
	done < /tmp/brewtap.csv ;}

installationloop() { \
    preinstallmsg
	filterprogs
    listpkg
	[ "$OS" == "macOS" ] && installationtaploop
	total=$(wc -l < /tmp/progs.csv)
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
        case "$tpick" in
            B)
                case "$tag" in
                    [HM]) maininstall "$program" "$comment" ;;
                    "A") aurinstall "$program" "$comment" ;;
                    "G") gitmakeinstall "$program" "$comment" ;;
                    "N") npminstall "$program" "$comment" ;;
                    "P") pipinstall "$program" "$comment" ;;
                esac

                ;;
            M|F)
                case "$tag" in
                    [MH]*) maininstall "$program" "$comment" ;;
                    "A"*) aurinstall "$program" "$comment" ;;
                    "G"*) gitmakeinstall "$program" "$comment" ;;
                    "N"*) npminstall "$program" "$comment" ;;
                    "P"*) pipinstall "$program" "$comment" ;;
                esac
                ;;
        esac
	done < /tmp/progs.csv
    installgpg
    installpassmgr
    chezinstall "$dotfilesrepo"
}

getUname(){
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"
    if [ "$kernel_name" == "Darwin" ];then
        export SYSTEM_VERSION_COMPAT=0
        IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
                                "/System/Library/CoreServices/SystemVersion.plist")"
            for ((i=0;i<${#sw_vers[@]};i+=2)) {
                case ${sw_vers[i]} in
                    ProductName)          darwin_name=${sw_vers[i+1]} ;;
                    ProductVersion)       osx_version=${sw_vers[i+1]} ;;
                    ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
                esac
            }
    fi
}
getgpg(){
	gpgpass1=$(dialog --no-cancel --passwordbox "Enter a password for gpg." 10 60 3>&1 1>&2 2>&3 3>&1)
	gpgpass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$gpgpass1" = "$gpgpass2" ]; do
		unset gpgpass2
		gpgpass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		gpgpass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

getuseros() { \
	# Prompts user for new username an password.
	name=$(dialog --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
		name=$(dialog --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	pass1=$(dialog --no-cancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

adduseros() { \
	# Adds user `$name` with password $pass1.
	dialog --infobox "Adding user \"$name\"..." 4 50 || error "Aborted"
    case "$OS" in
        "Linux") 
            useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
            usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
            repodir="/home/$name/.local/src"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
            echo "$name:$pass1" | chpasswd
            unset pass1 pass2
            ;;
        "macOS")
            dialog --infobox "$OS not yet supported. Aborting..." 4 50 && return
            ;;
    esac
}

checkuseros() { \
	! { id -u "$name" >/dev/null 2>&1; } ||
	dialog --colors --title "WARNING!" --yes-label "CONTINUE" --no-label "No wait..." --yesno "The user \`$name\` already exists on this system. RARBS can install for a user already existing, but it will \\Zboverwrite\\Zn any conflicting settings/dotfiles on the user account.\\n\\nRARBS will \\Zbnot\\Zn overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.\\n\\nNote also that RARBS will change $name's password to the one you just gave." 14 70
	}

rinfo(){ 
    case $OS in
        macOS) 
            opt=("\n
\ZbOperating System :\Zn $OS \n
\ZbVersion          :\Zn $distro\n
\ZbChassis          :\Zn $chassis\n
\ZbRARBS TYPE       :\Zn $nametpick\n
\ZbRARBS MODE       :\Zn $namempick\n
\ZbPassword Manager :\Zn $nameppick\n
\ZbWM/DE            :\Zn $namewdpick\n") ;;
        *) 
            opt=("\n
\ZbOperating System :\Zn $OS \n
\ZbDistro           :\Zn $distro\n
\ZbChassis          :\Zn $chassis\n\
\ZbRARBS TYPE       :\Zn $nametpick\n\
\ZbRARBS MODE       :\Zn $namempick\n\
\ZbPassword Manager :\Zn $nameppick\n\
\ZbWM/DE            :\Zn $namewdpick\n") ;;
    esac
    dialog --colors --no-label "Re-picking" --yes-label "Continue" \
           --title "RARBS Picking Info" --yesno \
           "$opt" 12 70 || picking
}

initsetup(){
    getUname
    getOS
    getDistro
    getChassis
    installpreq
    welcomemsg
    userpick
    installreq
}

picking(){
    modepick
    typepick
    passpick
    wmdepick
    rinfo
    getgpg
}

userOS(){
    getuseros
    checkuseros
    adduseros
}

dummy(){
    source $DIRS/debug && exit
}

main(){
    initsetup
    picking
    installationloop
    #configuration
    finalize
    clear
}

# TODO: Add long argument with --arguments
while getopts ":a:r:b:p:s:g:h:d" o; do case "${o}" in
	h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -s: Homebrew Source (tap)\\n  -a: AUR helper (must have pacman-like syntax) (paru by default)\\n  -h: Show this message\\n" && exit 1 ;;
	r) dotfilesrepo=${OPTARG} && chezmoi git ls-remote "$dotfilesrepo" || exit 1 ;;
	b) repobranch=${OPTARG} ;;
	p) progsfile=${OPTARG} ;;
	s) brewtapfile=${OPTARG} ;;
	a) aurhelper=${OPTARG} ;;
	g) gpgfile=${OPTARG} ;;
    d) dummy ;;
	*) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done
main "$@"
