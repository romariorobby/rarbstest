#!/bin/sh
# TODO: should adding -M -F -B (Minimal, Full, Base)?
while getopts ":a:r:b:p:s:g:h" o; do case "${o}" in
	h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -s: Homebrew Source (tap)\\n  -a: AUR helper (must have pacman-like syntax) (paru by default)\\n  -h: Show this message\\n" && exit 1 ;;
	r) dotfilesrepo=${OPTARG} && chezmoi git ls-remote "$dotfilesrepo" || exit 1 ;;
	b) repobranch=${OPTARG} ;;
	p) progsfile=${OPTARG} ;;
	s) brewtapfile=${OPTARG} ;;
	a) aurhelper=${OPTARG} ;;
	g) gpgfile=${OPTARG} ;;
	*) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

[ -z "$chrootfile" ] && chrootfile="https://raw.githubusercontent.com/romariorobby/rarbs/master/opt/chroot.sh"
[ -z "$prechrootfile" ] && prechroot="https://raw.githubusercontent.com/romariorobby/rarbs/master/opt/prechroot.sh"

[ -z "$dotfilesrepo" ] && dotfilesrepo="https://github.com/romariorobby/dotfiles.git"
[ -z "$sshdotfilesrepo" ] && sshdotfilesrepo="git@github.com:romariorobby/dotfiles.git"
# TODO: Update this when got merge with master
[ -z "$progsfile" ] && progsfile="https://raw.githubusercontent.com/romariorobby/rarbs/master/progs.csv"
[ -z "$brewtapfile" ] && brewtapfile="https://raw.githubusercontent.com/romariorobby/rarbs/master/opt/brewtap.csv"
[ -z "$aurhelper" ] && aurhelper="paru"
# var for Password Manager (Bitwarden,pass)
[ -z "$is_secret" ] && is_secret=""
[ -z "$gpgfile" ] && gpgfile="https://raw.githubusercontent.com/romariorobby/dotfiles/main/dot_local/share/vault/encrypted_aqs.tar.gz.asc"
# Source where pwd script is running
DIRS="$(dirname "$0")"
welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Lazy Bootstrap\\n\\nThis script will automatically install a fully-featured $OS desktop.\\n\\n-Romario" 10 60
    [[ "$distro" == "Arch Linux" ]] && \
        dialog --colors --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "If you running GNU/LINUX(Arch), Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
	}

error() { clear; printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;}

preinstallmsg() { \
	dialog --title "Let's get this party started!" --yes-label "Let's go!" --no-label "No, nevermind!" --yesno "The rest of the installation will now be totally automated, so you can sit back and relax.\\n\\nIt will take some time, but when done, you can relax even more with your complete system.\\n\\nNow just press <Let's go!> and the system will begin installation!" 13 60 || { clear; exit 1; }
	}

finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	if [ "$OS" == "macOS" ]; then
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\n Some configurations needed to restart .\\n\\n.t Romario" 12 80
	else
		dialog --title "All done, $OS!" --msgbox "Congrats, $name! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	fi
}

symlink(){ \
	[ -f "/etc/bash.bashrc" ] && echo '
if [ -s "${XDG_CONFIG_HOME:-$HOME/.config}/bash/.bashrc" ]; then
	. "${XDG_CONFIG_HOME:-$HOME/.config}/bash/.bashrc"
fi' >> /etc/bash.bashrc
	if [ "$OS" == "macOS" ]; then
		# Init
		cd $HOME && rm .bashrc .bash_history .bash_profile .bash_logout .zsh_history
		[ -d $HOME/.local/share/chezmoi ] && chezmoi -v apply

		# Symlink profile shell if exist
		[ -d $HOME/.config/shell ] && ln -sf $HOME/.config/shell/profile $HOME/.profile &&
		ln -sf $HOME/.config/shell/profile $HOME/.zprofile && echo "Symlink Shell"
	else
		# Init
		cd /home/$name && rm .bashrc .bash_history .bash_profile .bash_logout
		[ -d /home/$name/.local/share/chezmoi ] && sudo -u "$name" chezmoi -v apply

		# Symlink profile shell if exist
		[ -d /home/$name/.config/shell ] && sudo -u "$name" ln -sf /home/$name/.config/shell/profile /home/$name/.profile &&
		sudo -u "$name" ln -sf /home/$name/.config/shell/profile /home/$name/.zprofile && echo "Symlink Shell"

		# Symlink profile x11 if exist
		[ -d /home/$name/.config/x11 ] && sudo -u "$name" ln -sf /home/$name/.config/x11/xinitrc /home/$name/.xinitrc &&
		sudo -u "$name" ln -sf /home/$name/.config/x11/xprofile /home/$name/.xprofile && echo "Symlink X11"
	fi
}
newperms() { # Set special sudoers settings for install (or after).
	sed -i "/#RARBS/d" /etc/sudoers
	echo "$* #RARBS" >> /etc/sudoers ;}

getOS() { \
    case $kernel_name in
        Darwin) 
                OS=$darwin_name
                ;;
        Linux|GNU*) OS=Linux ;;
        *) error "Unknown OS: '$kernel_name'" ;;
    esac
}
getDistro(){
    case $OS in
        Linux|BSD)
            if [[ -f /etc/os-release ]]; then
                    source /etc/os-release
            fi
            distro="${NAME}"
            ;;
    esac
}

installdmi(){
    if [[ "$OS" == "macOS" ]]; then
        dmiurl="https://github.com/acidanthera/dmidecode/releases/download/3.3b/dmidecode-mac-3.3b.zip"
        curl -Ls $dmiurl -o /tmp/dmidecode.zip
        unzip /tmp/dmidecode.zip -d /usr/local/bin
    else
        installpkg dmidecode
    fi
}
installpreq(){
    echo "Installing Dialog...."
    [ -x "$(command -v "dialog")" ] || \
        installpkg dialog || error "Are you sure you're running this as the root user, are on an $OS and have an internet connection?"
	for x in curl git ntp zsh; do
		dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
		installpkg "$x"
	done
    # Just in case
	[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers
    case $OS in
        macOS) preqMac ;;
        Linux) preqLinux ;;
    esac
}

getChassis(){ \
    [ -x "$(command -v "dmidecode")" ] || installdmi
    # Systemd Spesific only
    # laptop
    #is_chassis=$(hostnamectl chassis)

    #https://superuser.com/questions/877677/programatically-determine-if-an-script-is-being-executed-on-laptop-or-desktop
    # Notebook - Desktop
    is_chassis=$(dmidecode -t chassis | grep "Type:" | cut -d: -f2 | tr -d ' ')
    # TODO: Add desktopp
    case "$is_chassis" in
        "Notebook") chassis="Laptop" ;;
        *) error "Unknown Chassis Type $is_chassis"
    esac
}
chassisconf(){
    case $chassis in
        Laptop) laptopconf ;;
        Desktop) desktopconf ;;
    esac
}
#
# PICKING
# 
userpicking(){ 
    modepick
    typepick
    wmdepick
    passpick
    rinfo
}
passpick(){
    cmd=(dialog --separate-output --checklist "Select options:" 22 76 16)
    options=(B "Bitwarden" on    # any option can be set to default to "on"
             P "Pass" off
             X "Don't Install" off)
    ppick=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
}
typepick() { \
	tpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Type: " 10 60 3 \
		B "Base Only" on \
		M "Minimal" on \
		F "Full" off 3>&1 1>&2 2>&3 3>&1)
	case $tpick in
		"B") nametpick="Base" ;;
		"M") nametpick="Minimal" ;;
		"F") nametpick="Full" ;;
	esac ;}

modepick(){ \
	if [[ "$distro" == "Arch Linux" ||  -f "/etc/artix-release" ]]; then
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Mode: " 10 80 3 \
                I "Installer (Archlinux only)" off \
                R "(Re)install(pkg)" on \
                P "Post Install" on \
                D "Debug" off 3>&1 1>&2 2>&3 3>&1)
    else
        mpick=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select RARBS Mode: " 10 80 3 \
                R "(Re)install(pkg)" on \
                P "Post Install" on \
                D "Debug" off 3>&1 1>&2 2>&3 3>&1)
    fi
	case $mpick in
		"I") namempick="Installer" ;;
		"R") namempick="(Re)install Package" ;;
		"D") namempick="Debug" ;;
		"P") namempick="Post Install" ;;
	esac

    case $mpick in
        "I") 
            dialog --defaultno --title "PRE-CHROOT" --yesno "Go to Pre-chroot?"  6 30 && curl $prechrootfile > prechroot.sh && bash prechroot.sh
            exit
            ;;
        "D")  
            dialog --defaultno --title "DEBUGGING" --yesno "Go to Debug Mode?"  6 30 && source $DIRS/debug || modepick
            exit
            ;;
    esac ;}


wmdepick() { \
	if [ "$OS" == "macOS" ]; then
        wmdetype=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select Windows Manager OR Desktop Environment: " 15 60 3 \
            DM "Amethyst" off \
            YM "Yabai" off \
            Z "Don't Install" on 3>&1 1>&2 2>&3 3>&1)
        case $wmdetype in
            "DM") namewmde="Amethyst" ;;
            "YM") namewmde="Yabai" ;;
        esac
    else
        wmdetype=$(dialog --no-cancel --backtitle "RARBS Type Installation" --radiolist "Select Windows Manager OR Desktop Environment: " 15 60 3 \
            AM "Awesome" off \
            DM "DWM" off \
            GE "GNOME(Not available yet)" off \
            XE "XFCE(Not available yet)" off \
            KE "KDE (Not available yet)" off \
            Z "Don't Install" on 3>&1 1>&2 2>&3 3>&1)
        case $wmdetype in
            "AM") namewmde="Awesome" ;;
            "DM") namewmde="DWM" ;;
            "XE") namewmde="XFCE" ;;
            "KE") namewmde="KDE" ;;
        esac
    fi
}
#
# Password Manager
#
getuserbw(){
	bwname=$(dialog --colors --inputbox "First, please enter a email address for \\Zbbitwarden\\Zn." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$bwname" | grep -q '\S\+@\S\+\.[A-Za-z]\+'; do
		bwname=$(dialog --colors --no-cancel --inputbox "Email Address \\Z1not valid\\Zn. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	bwpass1=$(dialog --no-cancel --inputbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	bwpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$bwpass1" = "$bwpass2" ]; do
		unset bwpass2
		bwpass1=$(dialog --no-cancel --inputbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		bwpass2=$(dialog --no-cancel --inputbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

adduserbw(){
    if [ "$mpick" == "I" ];then
		dialog --infobox "Adding Bitwarden-cli user \"$bwname\" for $name..." 4 50
		[ -x "$(command -v "bw")" ] || aurinstall bitwarden-cli-bin >/dev/null 2>&1
		bwdir="/home/$name/.local/share/bitwarden"; mkdir -p "$bwdir"; chown -R "$name":wheel "$(dirname "$bwdir")"
		dialog --infobox "Adding Email Adress and Password..." 4 50
		[ -f "$bwdir/email" -a -f "$bwdir/key"  ] && cp $bwdir/email $bwdir/email.bak && cp $bwdir/key $bwdir/email.bak
		# sudo -u "$name" echo $bwname > $bwdir/email && sudo -u "$name" echo $bwpass1 > $bwdir/key
		# sudo -u "$name" bw login --raw $bwname $bwpass1
		# dialog --infobox "Login on Bitwarden & Adding Environment Variables Locally..." 10 50
		# export BW_SESSION=$(sudo -u "$name" bw login --raw $bwname $bwpass1)
    else
		dialog --infobox "Adding Bitwarden-cli user \"$bwname\" for $name..." 4 50
		[ -x "$(command -v "bw")" ] || installpkg bitwarden-cli >/dev/null 2>&1
        if [ "$OS" == "macOS" ]; then
	    	bwdir="$HOME/.local/share/bitwarden"; mkdir -p "$bwdir"
        else
	    	bwdir="/home/$name/.local/share/bitwarden"; mkdir -p "$bwdir"
        fi
		# dialog --infobox "Adding Email Adress and Password..." 4 50
		# echo $bwname > $bwdirmac/email && echo $bwpass1 > $bwdirmac/key
		# ses=$(bw login $bwname $bwpass1 2>/dev/null | grep 'export' | sed -E 's/.*export BW_SESSION="(.*==)"$/\1/')
    fi
	dialog --infobox "Login on Bitwarden & Adding Environment Variables Locally..." 10 50
	bw logout 2>/dev/null
	export BW_SESSION=$(bw login $bwname $bwpass1 --raw)
	while [ -z "$BW_SESSION" ]; do
		dialog --colors --no-cancel --infobox "Username \\Zb($bwname)\\Zn or Password \\Zb($bwpass1)\\Zn \\Z1Error.\\Z1\\n\\nEnter Username and Password Again..." 10 50
		sleep 5s
		getuserbw
		adduserbw
	done
}
passmgr(){
    case $ppick in
        B) 
            getuserbw
            adduserbw
            ;;
        P) 
            getuserpass
            adduserpass
            ;;
        X) continue ;;
    esac
}
#
# OS Account

userOSpick(){
    case $OS in
        macOS) listname=$(dscl . list /Users | grep -v '_\|root\|daemon') ;; #> $tempuser)
        # HACK: Temporary to get user name on Linux
        Linux) listname=$(grep "1000\|0:0:" /etc/passwd | cut -d: -f1) ;;
    esac

    echo $USER
    while [ -z $name ]; do
        select user in $listname; do
            case $user in
                *)  name=$user
                    break ;;
            esac
        done
    done
}

getuserOS() { \
	# Prompts user for new username an password.
	name=$(dialog --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
		name=$(dialog --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	pass1=$(dialog --no-cancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done ;}

checkuserOS() { \
	! { id -u "$name" >/dev/null 2>&1; } ||
	dialog --colors --title "WARNING!" --yes-label "CONTINUE" --no-label "No wait..." --yesno "The user \`$name\` already exists on this system. RARBS can install for a user already existing, but it will \\Zboverwrite\\Zn any conflicting settings/dotfiles on the user account.\\n\\nRARBS will \\Zbnot\\Zn overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.\\n\\nNote also that RARBS will change $name's password to the one you just gave." 14 70
	}
userOS(){
    getuserOS
    checkuserOS
}
#
# 
# INSTALL
#
installpkg() {
	if [[ -f "/etc/arch-release" ||  -f "/etc/artix-release" ]]; then
		pacman --noconfirm --needed -S "$1" >/dev/null 2>&1
	elif [ "$OS" == "macOS" ]; then
		brew install "$1" >/dev/null 2>&1
	fi ;}

brewtap(){ \
    echo "$tapinstalled" | grep -q "^$1$" && \
        dialog --title "RARBS Homebrew Repositories" --infobox "\`$1\` repositories already added to Homebrew" 5 70 && sleep 0.1s && return 1
	brew tap "$1" >/dev/null 2>&1
}

maintap() {
	dialog --title "RARBS Homebrew Repositories" --infobox "Adding \`$1\` to Homebrew ($s of $totaltap). $1 $2" 5 70
	brewtap "$1"
}

maininstall() {
	echo "$pacinstalled" | grep -q "^$1$" && \
        dialog --title "RARBS Installation" --infobox "\`$1\` already installed from the package manager." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation" --infobox "Installing \`$1\` ($n of $total). $1 $2" 5 70
	installpkg "$1" ;}

aurinstall() {
	echo "$aurinstalled" | grep -q "^$1$" && \
        dialog --title "RARBS Installation" --infobox "\`$1\` already installed from the AUR." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation" --infobox "Installing \`$1\` ($n of $total) from the AUR. $1 $2" 5 70
	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1 ;}

pipinstall() { \
	echo "$pipinstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation" --infobox "\`$1\` already installed from the PIP." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation" --infobox "Installing the Python package \`$1\` ($n of $total). $1 $2" 5 70
	if [ "$OS" == "macOS" ]; then
		[ -x "$(command -v "pip")" ] || curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py >/dev/null 2>&1
	else 
		[ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1
	fi
	yes | pip install "$1" ;}

npminstall() { \
	echo "$npminstalled" | grep -q "^$1$" && \
		dialog --title "RARBS Installation" --infobox "\`$1\` already installed from the NPM." 5 70 && sleep 0.1s && return 1
	dialog --title "RARBS Installation" --infobox "Installing the NPM package \`$1\` ($n of $total). $1 $2" 5 70
	[ -x "$(command -v "npm")" ] || installpkg npm >/dev/null 2>&1 || installpkg node >/dev/null 2>&1
	npm install -g "$1" ;}

manualinstall(){
	[ -f "/usr/bin/$1" ] || (
	dialog --infobox "Installing \"$1\", an AUR helper..." 4 50
	cd /tmp || exit 1
	rm -rf /tmp/"$1"*
	sudo -u "$name" git clone https://aur.archlinux.org/$1.git &&
	cd $1 && sudo -u "$name" makepkg -si --noconfirm >/dev/null 2>&1
	cd /tmp || return 1) ;}

gitmakeinstall() {
	progname="$(basename "$1" .git)"
	dir="$repodir/$progname"
	dialog --title "RARBS Installation" --infobox "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 5 70
	sudo -u "$name" git clone --depth 1 "$1" "$dir" >/dev/null 2>&1 || { cd "$dir" || return 1 ;}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1 ;}

chezinstall() {
	dialog --infobox "Installing config files..." 4 60
	[ -x "$(command -v "chezmoi")" ] || installpkg chezmoi >/dev/null 2>&1
	chezdotinstall "$1" ;}
# 
# Requirement / Prequisite
#

refreshkeys() { \
	dialog --infobox "Refreshing Arch Keyring..." 4 40
	pacman -Q artix-keyring >/dev/null 2>&1 && pacman --noconfirm -S artix-keyring >/dev/null 2>&1
	pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
	}

installbrew(){ \
	[ -d "/Library/Developer/CommandLineTools" ] && \
        dialog --title "RARBS Installation" --infobox "XCode already installed." 5 70 || \
        xcode-select --install
    [ -x "$(command -v "brew")" ] && \
        dialog --title "RARBS Installation" --infobox "Homebrew already installed." 5 70 && sleep 0.1s
    dialog --title "RARBS Installation" --infobox "Updating Homebrew..." 5 70 && brew update
}
preqLinux(){
	newperms "%wheel ALL=(ALL) NOPASSWD: ALL"

    [ "$distro" == "Arch Linux" ] && refreshkeys
	# manualinstall $aurhelper || error "Failed to install AUR helper."
	manualinstall $aurhelper-bin || manualinstall $aurhelper || error "Failed to install $aurhelper (AUR helper)."

	ntpdate 0.id.pool.ntp.org >/dev/null 2>&1

}
preqMac(){
    # FIXME: do macOS need this?
    # Allow user to run sudo without password.
	newperms "%wheel ALL=(ALL) NOPASSWD: ALL"
    installbrew
}

chezmoiinstall() {
	dialog --title "Chezmoi Installation" --infobox "Downloading and Applying config files..." 4 60
	[ -x "$(command -v "chezmoi")" ] || installpkg chezmoi >/dev/null 2>&1
    dialog --infobox "Applying Chezmoi [$namempick - $nametpick]" 4 60
    # pass:mode:type pick
    case $ppick:$mpick:$tpick in
        B|P:I:M) sudo -u "$name" DOTMIN=1 chezmoi init --apply "$1" ;;
        B|P:I:F) sudo -u "$name" chezmoi init --apply "$1" ;;
        B|P:*:M) DOTMIN=1 chezmoi init --apply "$1" ;;
        B|P:*:F) chezmoi init --apply "$1" ;;
        *|I:M) sudo -u "$name" DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
        *|I:F) sudo -u "$name" SECRETOFF=1 chezmoi init --apply "$1" ;;
        *|*:M) DOTMIN=1 SECRETOFF=1 chezmoi init --apply "$1" ;;
        *|*:F) SECRETOFF=1 chezmoi init --apply "$1" ;;
    esac
}
# This must use before 'chezmoi --apply' to make it work
gpgcrypt(){ \
    ([ -f "$gpgfile" ] && cp "$gpgfile" /tmp/aqs.tar.gz.asc) || curl -Ls "$progsfile" -o /tmp/aqs.tar.gz.asc
    gpginstall 
	[ "$OS" == "macOS" ] && gpgdir="$HOME/.local/share/vault" || gpgdir="/home/$name/.local/share/vault"
    dialog --infobox "Completed Extracted GPG ..." 4 60
}

gpginstall(){ 
    dialog --infobox "Downloading GPG ..." 4 60
    [ -x "$(command -v "gpg")" ] || installpkg gnupg
    dialog --infobox "Decrypting GPG ..." 4 60
    [ "$mpick" == "I" ] && sudo -u "$name" gpg /tmp/aqs.tar.gz.asc 2>/dev/null \
        || gpg /tmp/aqs.tar.gz.asc
    while ! [ "$?" = 0 ]; do
        dialog --infobox "Error Decrypting GPG. retry..." 4 60
        dialog --infobox "Decrypting GPG ..." 4 60
        [ "$mpick" == "I" ] && sudo -u "$name" gpg /tmp/aqs.tar.gz.asc 2>/dev/null \
            || gpg /tmp/aqs.tar.gz.asc
    done
}

rinfo(){ 
    dialog --colors --title "Picking Info" --yesno "\\ZbOS :\\Zn $OS - $DISTRO\n\\ZbChassis:\\Zn $chassis\n\\ZbTYPE :\\Zn $nametpick\n\\ZbMODE :\\Zn $namempick\n\\ZbWM/DE:\\Zn $namewmde\n" 10 70 || userpicking ;}

#
# Laptop Spesific
#
laptopconf(){
    case $OS in
        Linux) lt_taptoclick
            ;;
    esac
}
lt_taptoclick(){
    [ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && \
        printf 'Section "InputClass"
			Identifier "libinput touchpad catchall"
			MatchIsTouchpad "on"
			MatchDevicePath "/dev/input/event*"
			Driver "libinput"
		# Enable left mouse button by tapping
		Option "Tapping" "on"
	EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf
}

systembeepoff() {
	dialog --infobox "Getting rid of that retarded error beep sound..." 10 50
	rmmod pcspkr
	echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf ;}

postconf(){
    # Make zsh the default shell for the user.
    if [[ "$OS" == "Linux" ]]; then
        # Use all cores for compilation.
        sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf
        if [ "$distro" == "Arch Linux" ]; then
            # Make zsh the default shell for the user.
            chsh -s /bin/zsh "$name" >/dev/null 2>&1
            sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

            # Make pacman and yay colorful, Enable Parallel Download and adds eye candy on the progress bar because why not.
            grep -q "^Color" /etc/pacman.conf || sed -i "s/^#Color$/Color/" /etc/pacman.conf
            grep -q "^ParallelDownloads" /etc/pacman.conf || sed -i "s/#Parallel/Parallel/" /etc/pacman.conf
            grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf

            # Most important command! Get rid of the beep!
            systembeepoff

            # Fix fluidsynth/pulseaudio issue.
            grep -q "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" /etc/conf.d/fluidsynth ||
                echo "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" >> /etc/conf.d/fluidsynth

            # This line, overwriting the `newperms` command above will allow the user to run
            # serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
            newperms "%wheel ALL=(ALL) ALL #RARBS
            %wheel ALL=(ALL) NOPASSWD: /usr/bin/make,/usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Qu,/usr/bin/systemctl restart NetworkManager,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/pacman -Qqe,/usr/bin/pacman,/usr/bin/pacman -S needed,/usr/bin/pacman -Slq,/usr/bin/loadkeys,/usr/bin/yay,/usr/bin/paru,/usr/bin/paru -Syu,/usr/bin/pacman -Syyuw --noconfirm,/usr/local/bin/sigdwmblocks"

	        # Start/restart PulseAudio.
            killall pulseaudio; sudo -u "$name" pulseaudio --start

            # patched libxft for colored emoji to rendered in suckless software
            dialog --title "RARBS Installation" --infobox "Finally, installing \`libxft-bgra\` to enable color emoji in suckless software without crashes." 5 70
            yes | sudo -u "$name" $aurhelper -S libxft-bgra-git >/dev/null 2>&1
        fi
    elif [[ "$OS" == "macOS" ]]; then
        [[ -x "$(command -v "yabai")" ]] && echo "$USER ALL= (root) NOPASSWD: /usr/local/bin/yabai --load-sa" > /private/etc/sudoers.d/yabai
        source $DIRS/postconfmac
    fi
}
#
# Filtering
#
filtertap(){ \
	case $tpick in
		"B") ([ -f "$brewtapfile" ] && grep "^M," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^M," > /tmp/brewtap.csv ;;
		"M") ([ -f "$brewtapfile" ] && grep "^MM," $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | grep "^MM," > /tmp/brewtap.csv ;;
		"F") ([ -f "$brewtapfile" ] && sed '/^#/d' $brewtapfile > /tmp/brewtap.csv ) || curl -Ls "$brewtapfile" | sed '/^#/d' > /tmp/brewtap.csv ;;
	esac ;}

filterprogs(){ \
	if [ "$OS" == "macOS" ]; then
		case $tpick in
			"B") ([ -f "$progsfile" ] && grep "^[HPN]," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN]," > /tmp/progs.csv ;;
			"M") ([ -f "$progsfile" ] && grep "^[HPN],\|HM,\|PM,\|NM," $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | grep "^[HPN],\|HM,\|PM,\|NM," > /tmp/progs.csv ;;
			"F") ([ -f "$progsfile" ] && sed '/^[#AM]/d' $progsfile > /tmp/progs.csv ) || curl -Ls "$progsfile" | sed '/^[#AM]/d' > /tmp/progs.csv ;;
		esac
	else
		case $tpick in
			"B") ([ -f "$progsfile" ] && grep "^[AMGPN]," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AMGPN]," > /tmp/progs.csv ;;
			"M") ([ -f "$progsfile" ] && grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | grep "^[AM],\|MM,\|AM,\|PM,\|NM,\|GM," > /tmp/progs.csv ;;
			"F") ([ -f "$progsfile" ] && sed '/^[#H]/d' "$progsfile" > /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^[#H]/d' > /tmp/progs.csv ;;
		esac
	fi ;}

installationtaploop(){ \
	filtertap
	tapinstalled=$(brew tap)
	totaltap=$(wc -l < /tmp/brewtap.csv)
	while IFS=, read -r tag source comment; do
		s=$((s+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case "$tag" in
			*) maintap "$source" "$comment" ;;
		esac
	done < /tmp/brewtap.csv ;}

# TODO: Make Read from org file del/IFS="|"
installationloop() { \
	filterprogs
	[ "$OS" == "macOS" ] && installationtaploop
	# ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -lLs "$progsfile" | sed '/^-\|*\|#/d;/^|-/d' > /tmp/progs.csv
	total=$(wc -l < /tmp/progs.csv)
	[[ "$distro" == "Arch Linux" ]] && aurinstalled=$(pacman -Qqm) && pacinstalled=$(pacman -Qq)
	[ "$OS" == "macOS" ] && pacinstalled=$(brew list | uniq)
	npminstalled=$(npm ls -g | awk '{print $2}' | sed 's/\@.*//; /^$/d')
	pipinstalled=$(pip list | awk '{print $1}')
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		case $tpick:$tag in
			# Package Manager/AUR , Git
			"B":"M"|"H") maininstall "$program" "$comment" ;;
			"B":"A") aurinstall "$program" "$comment" ;;
			"B":"G") gitmakeinstall "$program" "$comment" ;;
			"M":"M"|"H"|"HM"|"MM") maininstall "$program" "$comment" ;;
			"M":"A"|"AM") aurinstall "$program" "$comment" ;;
			"M":"G"|"GM") gitmakeinstall "$program" "$comment" ;;
			"F":"M"|"H"|"HM"|"HO"|"MM"|"MO") maininstall "$program" "$comment" ;;
			"F":"A"|"AM"|"AO") aurinstall "$program" "$comment" ;;
			"F":"G"|"GM"|"GO") gitmakeinstall "$program" "$comment" ;;
			#npm,pip
			"B":"P"|"N") pipinstall "$program" "$comment" ;;
			"B":"P"|"N") pipinstall "$program" "$comment" ;;
			"M":"PM"|"NM") pipinstall "$program" "$comment" ;;
			"M":"PM"|"NM") pipinstall "$program" "$comment" ;;
			"F":"P"|"PM"|"PO") pipinstall "$program" "$comment" ;;
			"F":"N"|"NM"|"NO") pipinstall "$program" "$comment" ;;
		esac
	done < /tmp/progs.csv ;}
main(){
    getUname
    getOS
    getDistro
    getChassis
    installpreq
    [ "$mpcick" != "I" ] && userOSpick
    welcomemsg
    [ "$OS" == "Linux" ] && userOS
    # [ if installer ] && adduser
    userpicking
    preinstallmsg
    installationloop
    [ "$mpick" == "R" ] && exit
    # TODO: Working on this
    passmgr
    dotinstall
    postconf
    ###################
    #chassisconf
    finalize
}

getUname(){
    IFS=" " read -ra uname <<< "$(uname -srm)"

    kernel_name="${uname[0]}"
    kernel_version="${uname[1]}"
    kernel_machine="${uname[2]}"
    if [ "$kernel_name" == "Darwin" ];then
        export SYSTEM_VERSION_COMPAT=0
        IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
                                "/System/Library/CoreServices/SystemVersion.plist")"
            for ((i=0;i<${#sw_vers[@]};i+=2)) {
                case ${sw_vers[i]} in
                    ProductName)          darwin_name=${sw_vers[i+1]} ;;
                    ProductVersion)       osx_version=${sw_vers[i+1]} ;;
                    ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
                esac
            }
    fi
}
main "$@"
